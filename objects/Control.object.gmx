<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
if (!file_exists(working_directory + "profiles.json")){
    var file = file_text_open_write(working_directory+"profiles.json");
    profiles = ds_map_create();
    file_text_write_string(file, json_encode(profiles));
    file_text_close(file);
}else{
    var file = file_text_open_read(working_directory+"profiles.json");
    var content = file_text_read_string(file);
    file_text_close(file);
    profiles = json_decode(content);
}


settings = ds_map_create();
sounds = ds_map_create();
excludes = ds_map_create();
sound_indexes = ds_map_create();
scenes = ds_map_create();
audio_group_names = ds_map_create();

scene_create("Balcony",sprBalconyBG, sprBalconyRail, "balcony", true, 1, 0.5);
scene_create("Autumn",sprAutumnBG, sprBlank, "autumn", false, 1/0.75, 0.5);
scene_create("Studying",sprStudyingBG, sprStudyingWindow, "studying", true, 2, 1);
scene_current = scenes[? "Balcony"];
scene_counter = 0;

    
sound_panel_create("flow", flow, "belly", true, 0.2, 1, 9);
sound_panel_create("gurgle", gurgle, "belly", true, 0.2, 0.5, 10);
sound_panel_create("eating_soft", eating_soft, "belly", true, 0.5, 0, 7);
sound_panel_create("eating_chips", eating_chips, "belly", true, 0.5, 0, 17);
sound_panel_create("drink", drink, "belly", true, 0.5, 0, 10);
//sound_panel_create("groan", "belly", true, 0.5, 0);

sound_panel_create("rain", rain, "environment", false, 0, 0, 1);
sound_panel_create("snow", snow, "environment", false, 0, 0, 1);
sound_panel_create("fireplace", fireplace, "environment", false, 0, 0, 1);
sound_panel_create("typing", typing, "environment", false, 0, 0, 1);
sound_panel_create("pageflip", pageflip, "environment", true, 0.5, 0, 9);

//bt = button_create("Voice", false, false, true);
//bt.group = "environment";

sound_panel_create("humming", humming, "environment", true, 0.5, 0, 2);
sound_panel_create("whisper", whisper, "environment", true, 0.5, 0, 2);
sound_panel_create("laugh", laugh, "environment", true, 0.5, 0, 8);

//sound_panel_create("spray", spray, "other", true, 0.2, 0, 4);
//sound_panel_create("slosh", slosh,  "other", true, 0.2, 0, 2);
sound_panel_create("calm_breath", calm_breath, "other", true, 0.9, 0, 6);
sound_panel_create("short_breath", short_breath, "other", true, 0.5, 0, 8);
sound_panel_create("heartbeatA", heartbeatA, "other", false, 0, 0, 1);
sound_panel_create("heartbeatB", heartbeatB, "other", false, 0, 0, 1);
sound_panel_create("hiccup", hiccup, "other", true, 0.5, 0, 5);
//bt = button_create("Proceed with caution", false, false, true);
//bt.group = "other";
sound_panel_create("fart", fart, "other", true, 0.5, 0, 4);
sound_panel_create("burp", burp, "other", true, 0.5, 0, 5);

button_create("Back to Main Menu", false, false, false);
button_create("Scenes", false, false, true);
button_create("Balcony", false, false, false);
button_create("Autumn", false, false, false);
button_create("Studying", false, false, false);
button_create("Scene Options", false, false, true);
button_create("Normal/Inflation/WG", false, false, false);
button_create("enema bag", true, false, false);

button_create("Settings", false, false, true);
button_create("Powersave Mode", true, false, false);
button_create("Set Individual Sounds", true, false, false);
button_create("load profile", false, false, false);
button_create("save profile", false, false, false);
button_create("clear all profiles", false, false, false);

audio_group_num = ds_map_size(sound_indexes);

command = "";

deployed = true;
//edit_mode = false;
updateProfile = false;
scene_mode = 1;
draw_counter = 0;
clear_screen = 0;

ex_video_play(working_directory+"balcony1.webm", true);
draw_set_font(fnt_normal);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*init_audio_group_names("flow", flow, "gurgle", gurgle, "burp", burp,
    "fart", fart, "groan", groan, "spray", spray, "slosh", slosh, "rain", rain,
    "heartbeatA", heartbeatA, "heartbeatB", heartbeatB, 
    "short_breath", short_breath, "calm_breath", calm_breath,
    "fireplace", fireplace);*/
    
/*sound_indexes[? "flow"] = 9;
sound_indexes[? "gurgle"] = 10;
sound_indexes[? "burp"] = 5;
sound_indexes[? "fart"] = 3;
sound_indexes[? "groan"] = 3;
sound_indexes[? "spray"] = 2;
sound_indexes[? "slosh"] = 4;
sound_indexes[? "rain"] = 1;
sound_indexes[? "fireplace"] = 1;
sound_indexes[? "heartbeatA"] = 1;
sound_indexes[? "heartbeatB"] = 1;
sound_indexes[? "short_breath"] = 8;
sound_indexes[? "calm_breath"] = 6;*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>updateProfile = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>command = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (command){
    case "":
    break;
    case "Back to Main Menu":
        command = "";
        ex_video_stop();
        room_goto(rmMainMenu);
        exit;
    break;
    case "Normal/Inflation/WG":
        scene_mode ++;
        if (scene_mode &gt; 3)
            scene_mode = 1;
        ex_video_stop();
        ex_video_play(working_directory+scene_current[? "sprFG"]+string(scene_mode)+".webm", true);
    break;
    case "load profile":
        setting_set_toggled("Disable Individual Sounds", false);
        msg = "0-default | ";
        var first_key = ds_map_find_first(profiles);
        for (var p=0; p &lt; ds_map_size(profiles); p++){
            msg += string(p+1) + "-"+first_key+" | ";
            first_key = ds_map_find_next(profiles, first_key);
        }
        var choice = get_integer(msg, 0);
        if (choice &lt; 0 || choice &gt; ds_map_size(profiles))
            break;
        //default profile
        if (choice == 0){
            room_persistent = false;
            audio_stop_all();
            room_restart();
            break;
        }    
      
        var profile = ds_map_find_value_at_index(profiles, choice-1);
        
        var content = json_encode(profile);
        profile = json_decode(content);
        
        settings = profile[? "settings"];
        sounds = profile[? "sounds"];
        excludes = profile[? "excludes"];
        with (Button) alarm[0] = 1;
        with (SoundPanel) alarm[1] = 1;
        
    break;
    case "save profile":
        setting_set_toggled("Disable Individual Sounds", false);
        var name = get_string("Enter new profile name: ", "boop");
        var profile = ds_map_create();
        ds_map_add_map(profile, "sounds", sounds);
        ds_map_add_map(profile, "settings", settings);
        ds_map_add_map(profile, "excludes", excludes);
        var content = json_encode(profile);
        profile = json_decode(content);
        ds_map_add_map(profiles, name,  profile);
        
        var file = file_text_open_write(working_directory+"profiles.json");
        file_text_write_string(file, json_encode(profiles));
        file_text_close(file);
        //json_encode
    break;
    case "clear all profiles":
        setting_set_toggled("Disable Individual Sounds", false);
        ds_map_destroy(profiles);
        
        var choice = show_question("Are you sure?");
        if (choice){
            var file = file_text_open_write(working_directory+ "profiles.json");
            profiles = ds_map_create();
            file_text_write_string(file, json_encode(profiles));
            file_text_close(file);
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var soundid = ds_map_find_first(sounds);
if (!setting_get_toggled("Set Individual Sounds"))
for (var i=0; i&lt;ds_map_size(sounds);i++){
    var limit = sound_indexes[? soundid];
    var soundInfo = sounds[? soundid];
    var groupid = asset_get_index(soundid);
    var flag = false;
    for (var a=1; a&lt;=limit;a++){
        var sound = asset_get_index(soundid+string(a));
        if (audio_is_playing(sound)){
            flag = true;
            break;
        }
    }
    if (!flag &amp;&amp; (!soundInfo[? "enable_freq"] ||  soundInfo[? "freq"] &gt; 0)){
        var chance = -1;
        if (soundInfo[? "enable_freq"])
            chance = floor(random((1-soundInfo[? "freq"]) *fps*10));
            
        if (chance == 0 || (!soundInfo[? "enable_freq"] &amp;&amp; soundInfo[? "vol"] &gt; 0)){
            if (audio_group_is_loaded(audio_group_get_index(soundid)))
                audio_play_sound(get_random_sound(soundid), 0, false);
        }
            
    }
    soundid = ds_map_find_next(sounds,soundid);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//detect powersave
if (setting_get_toggled("Powersave Mode") &amp;&amp; ex_video_is_playing()){
    ex_video_stop();
}else if(!setting_get_toggled("Powersave Mode") &amp;&amp; !ex_video_is_playing()){
    ex_video_play(working_directory+scene_current[? "sprFG"]+string(scene_mode)+".webm", true);
}

//detect changing scene
if (ds_map_exists(scenes, command)){
    scene_current = scenes[? command];
    ex_video_stop();
    
    if (!setting_get_toggled("Powersave Mode"))
        ex_video_play(working_directory+scene_current[? "sprFG"]+string(scene_mode)+".webm", true);
}
    
scene_counter+= scene_current[? "speed"];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.audio_group_loaded++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (clear_screen &gt; 0){
    //draw_clear(c_aqua);
}

draw_counter ++;
if (clear_screen &lt; 0 &amp;&amp; setting_get_toggled("Powersave Mode") &amp;&amp; draw_counter % 30 != 0)
    exit;
clear_screen--;
xx = 0;
if (deployed)
    xx = 271;

draw_sprite(scene_current[? "sprBG"], 0, xx, 0);
var soundRain = sounds[? "rain"];
if (scene_current[? "doRain"] &amp;&amp; soundRain[? "vol"] &gt; 0)
    draw_sprite_ext(sprRain, image_index, xx, 0, 2, 2, 0, c_white, soundRain[? "vol"]*2);
var soundSnow = sounds[? "snow"];
if (scene_current[? "doRain"] &amp;&amp; soundSnow[? "vol"] &gt; 0)
    draw_sprite_ext(sprSnow, image_index/2, xx, 0, 2, 2, 0, c_white, soundSnow[? "vol"]*2);
    
draw_sprite(scene_current[? "sprWall"], 0, xx, 0);
scale = scene_current[? "scale"]

if (setting_get_toggled("Powersave Mode") || !html5){
    var sprite = asset_get_index("spr"+scene_current[? "name"]+"FG");
    draw_sprite_ext(sprite, scene_counter, xx, 0, 1, 1, 0, c_white, 1);
}

if (setting_get_toggled("enema bag") &amp;&amp; html5){
    var sprite = asset_get_index("spr"+scene_current[? "name"]+"Enema");
    draw_sprite_ext(sprite, scene_counter, xx, 0, 1, 1, 0, c_white, 1);
}


if (deployed){
    draw_background(bgSidePanel, 0,0);
}
var ratio = window_get_width()/1280;
ex_video_set_position(xx*ratio, 0);

if (setting_get_toggled("Set Individual Sounds")){
    draw_set_color(c_black);
    draw_rectangle(500, room_height - 45, room_width - 300, room_height - 15, 0);
    draw_set_color(c_red);
    draw_set_halign(fa_center);
    draw_text(room_width/2+100, room_height - 30, "Right click to disable sound")
    draw_set_color(c_black);
}

if (global.audio_group_loaded &lt; audio_group_num){
    var c = make_color_rgb(79, 146, 184);
    draw_healthbar(300, 0, room_width - 300, 25, (global.audio_group_loaded/audio_group_num)*100,
        c_black, c, c, 0, 1, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
